import express, { Request, Response } from 'express';
import cors from 'cors';
import path from 'path';
import fs from 'fs';

import { ΞKernel } from './core/xi-kernel';

// Single kernel instance for the process (uses MockLLMPort by default)
const kernel = new ΞKernel();

const app = express();
app.use(cors());
app.use(express.json());

const staticDir = path.join(process.cwd(), 'public');
app.use(express.static(staticDir));

app.get('/healthz', (_req: Request, res: Response) => res.json({ ok: true }));

app.post('/api/chat', async (req: Request, res: Response) => {
  try {
    const message = (req.body?.message || '').toString();
    if (!message) return res.status(400).json({ error: 'message required' });

    const symbolId = `chat_${Date.now()}`;
    const symbol = await kernel.prompt(symbolId, { task: message, context: { source: 'web' } });

    return res.json({ symbolId, reply: symbol.payload, meta: symbol.meta });
  } catch (err: any) {
    console.error('chat error', err);
    return res.status(500).json({ error: 'internal_error', detail: String(err?.message || err) });
  }
});

app.get('/', (_req: Request, res: Response) => {
  const index = path.join(staticDir, 'index.html');
  if (fs.existsSync(index)) return res.sendFile(index);
  return res.status(404).send('Not Found');
});

const PORT = Number(process.env.PORT) || 8001;
app.listen(PORT, '0.0.0.0', () => console.log(`Web chat server listening on port ${PORT}`));

export default app;
